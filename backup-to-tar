#!/bin/bash

ADDITIONAL_TAR_ARGS_DIRECTIVE="TAR_ARGS="
DEFAULT_BACKUP_DEST_DIR="$HOME/system_backups" # CHANGED: Default to a persistent location

gecho() {
    echo -e "\033[1;32m$1\033[0m"
}
recho() {
    echo -e "\033[1;31m$1\033[0m"
}
yecho() {
    echo -e "\033[1;33m$1\033[0m"
}

help() {
    echo "Backup the directories and files listed in a configuration file using an incremental strategy."
    echo "A full backup is created initially, followed by smaller incremental backups."
    echo "Each run produces a single .tar.gz archive to be uploaded manually."
    echo "Caches and version control directories are excluded from the backup. see -g flag to include '.git' directories."
    echo
    echo "Input file format (e.g., ~/.backup.conf):"
    echo "- List absolute paths of directories and files to backup, one per line."
    echo "- Lines beginning with '#' are comments."
    echo "- Additional tar args can be added with: '$ADDITIONAL_TAR_ARGS_DIRECTIVE --exclude=\"*.foo\" --exclude=\"*.bar\"'"
    echo
    echo "Options:"
    echo "    -h    Display this help message."
    echo "    -i    Optional input configuration file (default: ~/.backup.conf)."
    echo "    -o    Optional output directory for archives and snapshot file (default: $DEFAULT_BACKUP_DEST_DIR)."
    echo "    -g    Optional: Include '.git' directories (default: excluded)."
    echo
    echo "IMPORTANT: The output directory must be persistent for incremental backups to work across runs."
}

# --- Argument Parsing (from your script) ---
BACKUP_CONF="$HOME/.backup.conf"
BACKUP_DEST_DIR="$DEFAULT_BACKUP_DEST_DIR"
INCLUDE_GIT_DIR=0 # 0 for false (exclude .git), 1 for true (include .git)

while getopts "hi:o:g" arg; do
    case $arg in
        h) # display Help
            help
            exit 0
            ;;
        i) # optional config file
            BACKUP_CONF=$OPTARG
            ;;
        o) # optional specify output directory
            BACKUP_DEST_DIR=$OPTARG
            ;;
        g) # optional include .git directories
            INCLUDE_GIT_DIR=1
            ;;
        \?) # Invalid arg
            echo "Error: Invalid argument" >&2
            help
            exit 1
            ;;
    esac
done

# --- Validations ---
if [ ! -f "$BACKUP_CONF" ]; then
    echo "Error: Backup configuration file not found: $BACKUP_CONF" >&2
    exit 1
fi

mkdir -p "$BACKUP_DEST_DIR"
if [ ! -d "$BACKUP_DEST_DIR" ] || [ ! -w "$BACKUP_DEST_DIR" ]; then
    echo "Error: Backup destination directory is not accessible or writable: $BACKUP_DEST_DIR" >&2
    exit 1
fi

# --- File Definitions ---
SNAPSHOT_FILE="$BACKUP_DEST_DIR/backup_snapshot.snar"
TMP_SOURCES_LIST=$(mktemp) # Temporary file for tar --files-from
DATE=$(date +%Y-%m-%d_%H%M%S) # More precise timestamp for archive names

# --- Process Configuration File ---
echo "Processing configuration file: $BACKUP_CONF"
ADDITIONAL_TAR_ARGS_FROM_CONF=""
found_directive=0

while IFS= read -r line || [[ -n "$line" ]]; do
    # Trim leading/trailing whitespace (optional, but good practice)
    path=$(echo "$line" | awk '{$1=$1};1')

    if [[ -z "$path" ]] || [[ "$path" =~ ^# ]]; then # Skip empty lines and comments
        continue
    fi

    if [[ "$path" =~ ^${ADDITIONAL_TAR_ARGS_DIRECTIVE} ]]; then
        if [ $found_directive -eq 0 ]; then
            ADDITIONAL_TAR_ARGS_FROM_CONF=$(echo "$path" | sed "s#^${ADDITIONAL_TAR_ARGS_DIRECTIVE}##")
            echo "Found additional tar arguments in config: $ADDITIONAL_TAR_ARGS_FROM_CONF"
            found_directive=1
        else
            yecho "Warning: Multiple '$ADDITIONAL_TAR_ARGS_DIRECTIVE' lines found. Using the first one." >&2
        fi
        continue # Directive line is not a path to backup
    fi

    # Check if path exists before adding to list
    if [ -e "$path" ]; then
        echo "$path" >> "$TMP_SOURCES_LIST"
    else
        yecho "Warning: Path specified in $BACKUP_CONF not found, skipping: '$path'" >&2
    fi
done < "$BACKUP_CONF"

if [ ! -s "$TMP_SOURCES_LIST" ]; then
    echo "Error: No valid source files or directories found to back up. Check $BACKUP_CONF." >&2
    rm "$TMP_SOURCES_LIST"
    exit 1
fi

# --- Prepare Tar Arguments ---
# Start with an array for safety, though eval will be used for the final string
# Standard excludes
TAR_CMD_ARGS_STR="--exclude-backups --exclude-caches-all --exclude-vcs --exclude='.venv' --exclude='__pycache__'"

if [ "$INCLUDE_GIT_DIR" -eq 0 ]; then
    TAR_CMD_ARGS_STR="$TAR_CMD_ARGS_STR --exclude='.git'"
fi

# Append args from config file
if [[ -n "$ADDITIONAL_TAR_ARGS_FROM_CONF" ]]; then
    TAR_CMD_ARGS_STR="$TAR_CMD_ARGS_STR $ADDITIONAL_TAR_ARGS_FROM_CONF"
fi

echo "Final combined tar arguments: $TAR_CMD_ARGS_STR"

# --- Determine Archive Name and Type ---
ARCHIVE_BASENAME="backup_${DATE}"
if [ ! -f "$SNAPSHOT_FILE" ]; then
    ARCHIVE_BASENAME="${ARCHIVE_BASENAME}_FULL"
    echo "Snapshot file not found. Creating a new FULL backup."
else
    ARCHIVE_BASENAME="${ARCHIVE_BASENAME}_INCR"
    echo "Snapshot file found. Creating an INCREMENTAL backup."
fi
FULL_ARCHIVE_PATH="$BACKUP_DEST_DIR/${ARCHIVE_BASENAME}.tar.gz"

# --- Create the Backup ---
echo "Starting backup..."
echo "  Archive will be: $FULL_ARCHIVE_PATH"
echo "  Snapshot file:   $SNAPSHOT_FILE"
echo "  Sources list:    $TMP_SOURCES_LIST"

# Using eval to correctly interpret the TAR_CMD_ARGS_STR, similar to your original script.
# Ensure paths with spaces are handled by quoting file variables.
eval "tar --create \
    --file=\"$FULL_ARCHIVE_PATH\" \
    --listed-incremental=\"$SNAPSHOT_FILE\" \
    --files-from=\"$TMP_SOURCES_LIST\" \
    $TAR_CMD_ARGS_STR \
    --gzip \
    --absolute-names" # Assumes paths in config are absolute and should be stored as such

TAR_EXIT_CODE=$?

# --- Cleanup and Report ---
rm "$TMP_SOURCES_LIST"

if [ $TAR_EXIT_CODE -eq 0 ] || [ $TAR_EXIT_CODE -eq 1 ]; then # 0=success, 1=files changed during archive
    if [ -s "$FULL_ARCHIVE_PATH" ]; then # Check if archive was created and is not empty
        gecho "-------------------------------------------------------------"
        gecho "Backup SUCCEEDED (tar exit code: $TAR_EXIT_CODE)."
        gecho "Archive created: $FULL_ARCHIVE_PATH"
        gecho "Remember to UPLOAD THIS FILE to where you store backups."
        gecho "-------------------------------------------------------------"
        if [ $TAR_EXIT_CODE -eq 1 ]; then
            yecho "Warning: Some files may have changed during archiving." >&2
        fi
    elif [ $TAR_EXIT_CODE -eq 0 ]; then # tar succeeded but archive is empty (or very small)
        gecho "-------------------------------------------------------------"
        gecho "Backup SUCCEEDED (tar exit code: $TAR_EXIT_CODE)."
        gecho "Archive created: $FULL_ARCHIVE_PATH"
        gecho "(Archive might be empty or very small if no files changed since last backup)."
        gecho "Remember to UPLOAD THIS FILE to where you store backups."
        gecho "-------------------------------------------------------------"
    else # Should not happen if TAR_EXIT_CODE is 0 or 1
        recho "Error: Backup succeeded (code $TAR_EXIT_CODE) but archive is empty/missing: $FULL_ARCHIVE_PATH" >&2
        exit 1
    fi
else
    recho "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    recho "Backup FAILED (tar exit code: $TAR_EXIT_CODE)."
    recho "Archive may not have been created or is incomplete: $FULL_ARCHIVE_PATH"
    recho "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    # Attempt to clean up potentially incomplete archive
    [ -f "$FULL_ARCHIVE_PATH" ] && rm "$FULL_ARCHIVE_PATH"
    exit 1
fi

exit 0